[org 0x0100]            ; .COM file format

start:
    ; Set video mode 13h (320x200, 256 colors)
    mov ax, 0x0013
    int 0x10

    ; Load the palette into the VGA DAC
    
    ; Load and display the background
    call load_palette
    call display_background

    ; Load and display the pixel data (40x40 image at position 140x100)
    call display_bird

    ; Wait for a key press before exiting
    ; mov ah, 0x00
    ; int 0x16

    ; Exit to DOS
    mov ax, 0x4C00
    int 0x21

;=============================
; Function: display_image
; Displays the 40x40 image at position (140, 100) in video memory
;=============================
display_bird:
    pusha
    mov ax, 0xA000           ; Set ES to video memory segment
    mov es, ax
    mov ax, ds
    add ax, 0x0F00
    mov ds, ax
    mov si, pixel_data_bird      ; SI points to the pixel data
    sub si, 0xF000

    ; Set the position to (140, 100) in video memory
    mov di, 140 + 100 * 320  ; DI = x + y * 320 (offset in video memory)
    
    mov cx, 40               ; 40 rows to display
display_row:
    push cx
    mov cx, 40               ; 40 pixels per row
display_pixel:
    lodsb                    ; Load a byte (pixel color index) from pixel_data
    cmp al, 0xF5
    je .notprint
    stosb                    ; Store the byte in video memory (A000h:DI)
    loop display_pixel       ; Repeat for all 40 pixels in the row
    jmp .next
    .notprint:
    add di, 1
    loop display_pixel       ; Repeat for all 40 pixels in the row

    .next:
    ; Move to the next row (skip the rest of the screen line)
    add di, 320 - 40         ; Move to the next row by skipping 320-40 pixels
    pop cx
    loop display_row         ; Repeat for all 40 rows
    popa
    ret














;=============================
; Function: load_palett
; Loads the background palette into VGA DAC registers
;=============================
load_palette:
    mov dx, 0x03C8          ; Set starting color index (0)
    xor al, al            ; Start at color 0
    out dx, al
    inc dx                   ; Move to DAC data register (0x03C9)

    ; Load all 256 colors (each color has 3 components: R, G, B)
    mov cx, 256 * 3          ; 256 colors * 3 components (RGB)
    mov si, palette_data_background ; SI points to the palette data

load_palette_loop_background:
    lodsb                    ; Load the next palette value into AL
    out dx, al               ; Send the value to the DAC
    loop load_palette_loop_background    ; Repeat for all 256 colors
    ret

;=============================
; Function: display_background
; Displays the full-screen background image in video memory
;=============================
display_background:
    mov ax, 0xA000           ; Set ES to video memory segment
    mov es, ax
    mov si, pixel_data_background ; SI points to the pixel data

    ; Set the position to (0, 0) in video memory
    mov di, 0  ; DI = x + y * 320 (offset in video memory)
    
    mov cx, 200               ; 200 rows to display (for 320x200 resolution)

display_row_background:
    push cx
    mov cx, 320               ; 320 pixels per row (since the screen is 320 pixels wide)

display_pixel_background:
    lodsb                    ; Load a byte (pixel color index) from pixel_data_background
    stosb                    ; Store the byte in video memory (A000h:DI)
    loop display_pixel_background   ; Repeat for all 320 pixels in the row

    pop cx
    loop display_row_background     ; Repeat for all 200 rows
    ret

;=============================
; Data Section
;=============================
%include 'pallete_data.asm'
%include 'background_img.asm'     ; Include the pixel data and palette generated by Python
%include 'bird.asm'     ; Include the pixel data and palette generated by Python